Bitwise operator 

1. let a = 5(00000101), b = 9(00001001)
	a & b = 1  (and)
	
	00000101
	00001001
	--------
	00000001 = 1
2. a|b (or)

	00000101
	00001001
	--------
	00001101 = 13
3. a ^ b (xor)

	00000101
	00001001
	--------
	00001100 = 12
4. ~ a (negative/ 1st complement)

	00000101
	--------
	11111010 = 250
5. b<<1 (left shift)


	00001001
	--------
	00010010 
	
	b<<m means  b * pow(2,m)

5. b>>1 (right shift)

	00001001
	--------
	00000100

	b>>m means b/pow(2,m)

6. The left shift and right shift operators should not be used for negative numbers The result of is undefined behaviour if any of the operands is a negative number.
 For example results of both -1 << 1 and 1 << -1 is undefined.

7. if the number is shifted more than the size of integer, the behaviour is undefined. For example, 1 << 33 is undefined if integers are stored using 32 bits. 
	
